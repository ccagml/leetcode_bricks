{"data":[{"name":"2024-05-10 17:45:33","id":1715334333459,"body":"class Solution\n{\npublic:\n    int longestWPI(vector<int> &hours)\n    {\n        int result = 0;\n        vector<vector<int>> vvi(hours.size(), vector<int>(hours.size()));\n        // unordered_map<int, unordered_map<int, int>> vvi;\n        // vvi[a][b] = 1, -- a 到 b的劳累天数\n        for (int i = 0; i < hours.size(); i++)\n        {\n            int h = hours[i];\n            if (h > 8)\n            {\n                result = 1;\n                vvi[i][i] = 1;\n            }\n        }\n        for (int len = 1; len < hours.size(); len++)\n        {\n            for (int i = 0; i < hours.size(); i++)\n            {\n                if (i + len >= hours.size())\n                {\n                    break;\n                }\n                int a = vvi[i][i + len - 1];\n                int b = vvi[i + len][i + len];\n                vvi[i][i + len] = a + b;\n                int all_cnt = len + 1;\n                if ((a + b) * 2 > all_cnt)\n                {\n                    result = max(result, all_cnt);\n                }\n            }\n        }\n        return result;\n    }\n};\n\n内存超了"},{"name":"2024-05-11 10:32:17","id":1715394737939,"body":"贪心也不是,二分也不是\nclass Solution\n{\npublic:\n    int longestWPI(vector<int> &hours)\n    {\n        vector<int> vi;\n        for (int i : hours)\n        {\n            vi.push_back(i > 8 ? 1 : 0);\n        }\n        vector<int> vi_1sum;\n        int temp = 0;\n        for (int i : vi)\n        {\n            temp += i;\n            vi_1sum.push_back(temp);\n        }\n        int result = half(vi_1sum);\n        return result;\n    }\n\n    int get_1(vector<int> &sum1, int left, int right)\n    {\n        if (left == 0)\n        {\n            return sum1[right];\n        }\n        else\n        {\n            return sum1[right] - sum1[left - 1];\n        }\n\n        // [1, 0, 1]\n        // sum1 [1, 1, 2]\n    }\n\n    bool check(vector<int> &sum1, int mid)\n    {\n\n        for (int left = 0; left < sum1.size(); left++)\n        {\n            int right = left + mid - 1;\n            if (right >= sum1.size())\n            {\n                return false;\n            }\n            int cnt1 = get_1(sum1, left, right);\n            if (cnt1 * 2 > mid)\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    int half(vector<int> &sum1)\n    {\n        int result_left = 0;\n        int result_right = sum1.size();\n        while (result_left < result_right)\n        {\n            int mid = (result_left + result_right + 1) / 2;\n\n            if (check(sum1, mid))\n            {\n                result_left = mid;\n            }\n            else\n            {\n                result_right = mid - 1;\n            }\n        }\n        return result_left;\n    }\n};"}]}