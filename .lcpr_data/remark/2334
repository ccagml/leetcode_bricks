{"data":[{"name":"2023-04-18 14:48:47","id":1681800527784,"body":"超时\nclass Solution\n{\npublic:\n    vector<int> fullBloomFlowers(vector<vector<int>> &flowers, vector<int> &people)\n    {\n        unordered_map<int, vector<int>> umivi;\n        for (int i = 0; i < flowers.size(); i++)\n        {\n            umivi[flowers[i][0]].push_back(flowers[i][1]);\n        }\n\n        vector<pair<int, vector<int>>> vpi;\n        for (pair<int, vector<int>> pv : umivi)\n        {\n            sort(pv.second.begin(), pv.second.end());\n            vpi.push_back(pv);\n        }\n        sort(vpi.begin(), vpi.end());\n        unordered_set<int> us;\n        for (int j : people)\n        {\n            us.insert(j);\n        }\n        vector<int> vi;\n        for (int p : us)\n        {\n            vi.push_back(p);\n        }\n        sort(vi.begin(), vi.end());\n        unordered_map<int, int> umii;\n        for (int i = 0; i < vi.size(); i++)\n        {\n            int cur = vi[i];\n            // 开始小于等于 cur, 结束 大于等于 cur\n            int cur_has = 0;\n            for (int left = 0; left < vpi.size(); left++)\n            {\n                if (vpi[left].first > cur)\n                {\n                    break;\n                }\n\n                // 第一个大于等于 i 的位置\n                auto lower = std::lower_bound(vpi[left].second.begin(), vpi[left].second.end(), cur);\n                cur_has += (vpi[left].second.end() - lower);\n            }\n            umii[cur] = cur_has;\n        }\n        vector<int> result;\n        for (int p : people)\n        {\n            result.push_back(umii[p]);\n        }\n        return result;\n    }\n};\n"}]}